// Code generated by mockery v2.49.1. DO NOT EDIT.

package mocks

import (
	context "context"

	entities "github.com/neyrzx/youmusic/internal/domain/entities"
	mock "github.com/stretchr/testify/mock"
)

// MockTracksRepository is an autogenerated mock type for the TracksRepository type
type MockTracksRepository struct {
	mock.Mock
}

type MockTracksRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTracksRepository) EXPECT() *MockTracksRepository_Expecter {
	return &MockTracksRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, track
func (_m *MockTracksRepository) Create(ctx context.Context, track entities.Track) error {
	ret := _m.Called(ctx, track)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.Track) error); ok {
		r0 = rf(ctx, track)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTracksRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockTracksRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - track entities.Track
func (_e *MockTracksRepository_Expecter) Create(ctx interface{}, track interface{}) *MockTracksRepository_Create_Call {
	return &MockTracksRepository_Create_Call{Call: _e.mock.On("Create", ctx, track)}
}

func (_c *MockTracksRepository_Create_Call) Run(run func(ctx context.Context, track entities.Track)) *MockTracksRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entities.Track))
	})
	return _c
}

func (_c *MockTracksRepository_Create_Call) Return(_a0 error) *MockTracksRepository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTracksRepository_Create_Call) RunAndReturn(run func(context.Context, entities.Track) error) *MockTracksRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Exists provides a mock function with given fields: ctx, track
func (_m *MockTracksRepository) Exists(ctx context.Context, track entities.Track) error {
	ret := _m.Called(ctx, track)

	if len(ret) == 0 {
		panic("no return value specified for Exists")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.Track) error); ok {
		r0 = rf(ctx, track)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTracksRepository_Exists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exists'
type MockTracksRepository_Exists_Call struct {
	*mock.Call
}

// Exists is a helper method to define mock.On call
//   - ctx context.Context
//   - track entities.Track
func (_e *MockTracksRepository_Expecter) Exists(ctx interface{}, track interface{}) *MockTracksRepository_Exists_Call {
	return &MockTracksRepository_Exists_Call{Call: _e.mock.On("Exists", ctx, track)}
}

func (_c *MockTracksRepository_Exists_Call) Run(run func(ctx context.Context, track entities.Track)) *MockTracksRepository_Exists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entities.Track))
	})
	return _c
}

func (_c *MockTracksRepository_Exists_Call) Return(_a0 error) *MockTracksRepository_Exists_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTracksRepository_Exists_Call) RunAndReturn(run func(context.Context, entities.Track) error) *MockTracksRepository_Exists_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTracksRepository creates a new instance of MockTracksRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTracksRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTracksRepository {
	mock := &MockTracksRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
