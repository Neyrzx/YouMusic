// Code generated by mockery v2.49.1. DO NOT EDIT.

package mocks

import (
	context "context"

	entities "github.com/neyrzx/youmusic/internal/domain/entities"
	dao "github.com/neyrzx/youmusic/internal/domain/repositories/dao"

	mock "github.com/stretchr/testify/mock"

	pgx "github.com/jackc/pgx/v5"
)

// MockTracksRepository is an autogenerated mock type for the TracksRepository type
type MockTracksRepository struct {
	mock.Mock
}

type MockTracksRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTracksRepository) EXPECT() *MockTracksRepository_Expecter {
	return &MockTracksRepository_Expecter{mock: &_m.Mock}
}

// CreateArtist provides a mock function with given fields: ctx, tx, artist
func (_m *MockTracksRepository) CreateArtist(ctx context.Context, tx pgx.Tx, artist dao.Artist) (int, error) {
	ret := _m.Called(ctx, tx, artist)

	if len(ret) == 0 {
		panic("no return value specified for CreateArtist")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, pgx.Tx, dao.Artist) (int, error)); ok {
		return rf(ctx, tx, artist)
	}
	if rf, ok := ret.Get(0).(func(context.Context, pgx.Tx, dao.Artist) int); ok {
		r0 = rf(ctx, tx, artist)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, pgx.Tx, dao.Artist) error); ok {
		r1 = rf(ctx, tx, artist)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTracksRepository_CreateArtist_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateArtist'
type MockTracksRepository_CreateArtist_Call struct {
	*mock.Call
}

// CreateArtist is a helper method to define mock.On call
//   - ctx context.Context
//   - tx pgx.Tx
//   - artist dao.Artist
func (_e *MockTracksRepository_Expecter) CreateArtist(ctx interface{}, tx interface{}, artist interface{}) *MockTracksRepository_CreateArtist_Call {
	return &MockTracksRepository_CreateArtist_Call{Call: _e.mock.On("CreateArtist", ctx, tx, artist)}
}

func (_c *MockTracksRepository_CreateArtist_Call) Run(run func(ctx context.Context, tx pgx.Tx, artist dao.Artist)) *MockTracksRepository_CreateArtist_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(pgx.Tx), args[2].(dao.Artist))
	})
	return _c
}

func (_c *MockTracksRepository_CreateArtist_Call) Return(id int, err error) *MockTracksRepository_CreateArtist_Call {
	_c.Call.Return(id, err)
	return _c
}

func (_c *MockTracksRepository_CreateArtist_Call) RunAndReturn(run func(context.Context, pgx.Tx, dao.Artist) (int, error)) *MockTracksRepository_CreateArtist_Call {
	_c.Call.Return(run)
	return _c
}

// CreateLyric provides a mock function with given fields: ctx, tx, lyrics
func (_m *MockTracksRepository) CreateLyric(ctx context.Context, tx pgx.Tx, lyrics []dao.Lyric) error {
	ret := _m.Called(ctx, tx, lyrics)

	if len(ret) == 0 {
		panic("no return value specified for CreateLyric")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, pgx.Tx, []dao.Lyric) error); ok {
		r0 = rf(ctx, tx, lyrics)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTracksRepository_CreateLyric_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateLyric'
type MockTracksRepository_CreateLyric_Call struct {
	*mock.Call
}

// CreateLyric is a helper method to define mock.On call
//   - ctx context.Context
//   - tx pgx.Tx
//   - lyrics []dao.Lyric
func (_e *MockTracksRepository_Expecter) CreateLyric(ctx interface{}, tx interface{}, lyrics interface{}) *MockTracksRepository_CreateLyric_Call {
	return &MockTracksRepository_CreateLyric_Call{Call: _e.mock.On("CreateLyric", ctx, tx, lyrics)}
}

func (_c *MockTracksRepository_CreateLyric_Call) Run(run func(ctx context.Context, tx pgx.Tx, lyrics []dao.Lyric)) *MockTracksRepository_CreateLyric_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(pgx.Tx), args[2].([]dao.Lyric))
	})
	return _c
}

func (_c *MockTracksRepository_CreateLyric_Call) Return(err error) *MockTracksRepository_CreateLyric_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTracksRepository_CreateLyric_Call) RunAndReturn(run func(context.Context, pgx.Tx, []dao.Lyric) error) *MockTracksRepository_CreateLyric_Call {
	_c.Call.Return(run)
	return _c
}

// CreateTrack provides a mock function with given fields: ctx, tx, track
func (_m *MockTracksRepository) CreateTrack(ctx context.Context, tx pgx.Tx, track dao.Track) (int, error) {
	ret := _m.Called(ctx, tx, track)

	if len(ret) == 0 {
		panic("no return value specified for CreateTrack")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, pgx.Tx, dao.Track) (int, error)); ok {
		return rf(ctx, tx, track)
	}
	if rf, ok := ret.Get(0).(func(context.Context, pgx.Tx, dao.Track) int); ok {
		r0 = rf(ctx, tx, track)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, pgx.Tx, dao.Track) error); ok {
		r1 = rf(ctx, tx, track)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTracksRepository_CreateTrack_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTrack'
type MockTracksRepository_CreateTrack_Call struct {
	*mock.Call
}

// CreateTrack is a helper method to define mock.On call
//   - ctx context.Context
//   - tx pgx.Tx
//   - track dao.Track
func (_e *MockTracksRepository_Expecter) CreateTrack(ctx interface{}, tx interface{}, track interface{}) *MockTracksRepository_CreateTrack_Call {
	return &MockTracksRepository_CreateTrack_Call{Call: _e.mock.On("CreateTrack", ctx, tx, track)}
}

func (_c *MockTracksRepository_CreateTrack_Call) Run(run func(ctx context.Context, tx pgx.Tx, track dao.Track)) *MockTracksRepository_CreateTrack_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(pgx.Tx), args[2].(dao.Track))
	})
	return _c
}

func (_c *MockTracksRepository_CreateTrack_Call) Return(id int, err error) *MockTracksRepository_CreateTrack_Call {
	_c.Call.Return(id, err)
	return _c
}

func (_c *MockTracksRepository_CreateTrack_Call) RunAndReturn(run func(context.Context, pgx.Tx, dao.Track) (int, error)) *MockTracksRepository_CreateTrack_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: ctx, ID
func (_m *MockTracksRepository) GetByID(ctx context.Context, ID int) (entities.Track, error) {
	ret := _m.Called(ctx, ID)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 entities.Track
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (entities.Track, error)); ok {
		return rf(ctx, ID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) entities.Track); ok {
		r0 = rf(ctx, ID)
	} else {
		r0 = ret.Get(0).(entities.Track)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTracksRepository_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockTracksRepository_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - ID int
func (_e *MockTracksRepository_Expecter) GetByID(ctx interface{}, ID interface{}) *MockTracksRepository_GetByID_Call {
	return &MockTracksRepository_GetByID_Call{Call: _e.mock.On("GetByID", ctx, ID)}
}

func (_c *MockTracksRepository_GetByID_Call) Run(run func(ctx context.Context, ID int)) *MockTracksRepository_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockTracksRepository_GetByID_Call) Return(_a0 entities.Track, _a1 error) *MockTracksRepository_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTracksRepository_GetByID_Call) RunAndReturn(run func(context.Context, int) (entities.Track, error)) *MockTracksRepository_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetLyricsByTrackIDs provides a mock function with given fields: ctx, tx, IDs
func (_m *MockTracksRepository) GetLyricsByTrackIDs(ctx context.Context, tx pgx.Tx, IDs []int) ([]dao.Lyric, error) {
	ret := _m.Called(ctx, tx, IDs)

	if len(ret) == 0 {
		panic("no return value specified for GetLyricsByTrackIDs")
	}

	var r0 []dao.Lyric
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, pgx.Tx, []int) ([]dao.Lyric, error)); ok {
		return rf(ctx, tx, IDs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, pgx.Tx, []int) []dao.Lyric); ok {
		r0 = rf(ctx, tx, IDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dao.Lyric)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, pgx.Tx, []int) error); ok {
		r1 = rf(ctx, tx, IDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTracksRepository_GetLyricsByTrackIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLyricsByTrackIDs'
type MockTracksRepository_GetLyricsByTrackIDs_Call struct {
	*mock.Call
}

// GetLyricsByTrackIDs is a helper method to define mock.On call
//   - ctx context.Context
//   - tx pgx.Tx
//   - IDs []int
func (_e *MockTracksRepository_Expecter) GetLyricsByTrackIDs(ctx interface{}, tx interface{}, IDs interface{}) *MockTracksRepository_GetLyricsByTrackIDs_Call {
	return &MockTracksRepository_GetLyricsByTrackIDs_Call{Call: _e.mock.On("GetLyricsByTrackIDs", ctx, tx, IDs)}
}

func (_c *MockTracksRepository_GetLyricsByTrackIDs_Call) Run(run func(ctx context.Context, tx pgx.Tx, IDs []int)) *MockTracksRepository_GetLyricsByTrackIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(pgx.Tx), args[2].([]int))
	})
	return _c
}

func (_c *MockTracksRepository_GetLyricsByTrackIDs_Call) Return(lyrics []dao.Lyric, err error) *MockTracksRepository_GetLyricsByTrackIDs_Call {
	_c.Call.Return(lyrics, err)
	return _c
}

func (_c *MockTracksRepository_GetLyricsByTrackIDs_Call) RunAndReturn(run func(context.Context, pgx.Tx, []int) ([]dao.Lyric, error)) *MockTracksRepository_GetLyricsByTrackIDs_Call {
	_c.Call.Return(run)
	return _c
}

// GetTracksByFilter provides a mock function with given fields: ctx, tx, filter
func (_m *MockTracksRepository) GetTracksByFilter(ctx context.Context, tx pgx.Tx, filter entities.TrackGetListFilters) (map[int]entities.Track, error) {
	ret := _m.Called(ctx, tx, filter)

	if len(ret) == 0 {
		panic("no return value specified for GetTracksByFilter")
	}

	var r0 map[int]entities.Track
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, pgx.Tx, entities.TrackGetListFilters) (map[int]entities.Track, error)); ok {
		return rf(ctx, tx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, pgx.Tx, entities.TrackGetListFilters) map[int]entities.Track); ok {
		r0 = rf(ctx, tx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[int]entities.Track)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, pgx.Tx, entities.TrackGetListFilters) error); ok {
		r1 = rf(ctx, tx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTracksRepository_GetTracksByFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTracksByFilter'
type MockTracksRepository_GetTracksByFilter_Call struct {
	*mock.Call
}

// GetTracksByFilter is a helper method to define mock.On call
//   - ctx context.Context
//   - tx pgx.Tx
//   - filter entities.TrackGetListFilters
func (_e *MockTracksRepository_Expecter) GetTracksByFilter(ctx interface{}, tx interface{}, filter interface{}) *MockTracksRepository_GetTracksByFilter_Call {
	return &MockTracksRepository_GetTracksByFilter_Call{Call: _e.mock.On("GetTracksByFilter", ctx, tx, filter)}
}

func (_c *MockTracksRepository_GetTracksByFilter_Call) Run(run func(ctx context.Context, tx pgx.Tx, filter entities.TrackGetListFilters)) *MockTracksRepository_GetTracksByFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(pgx.Tx), args[2].(entities.TrackGetListFilters))
	})
	return _c
}

func (_c *MockTracksRepository_GetTracksByFilter_Call) Return(tracks map[int]entities.Track, err error) *MockTracksRepository_GetTracksByFilter_Call {
	_c.Call.Return(tracks, err)
	return _c
}

func (_c *MockTracksRepository_GetTracksByFilter_Call) RunAndReturn(run func(context.Context, pgx.Tx, entities.TrackGetListFilters) (map[int]entities.Track, error)) *MockTracksRepository_GetTracksByFilter_Call {
	_c.Call.Return(run)
	return _c
}

// IsArtistExists provides a mock function with given fields: ctx, tx, name
func (_m *MockTracksRepository) IsArtistExists(ctx context.Context, tx pgx.Tx, name string) (int, bool) {
	ret := _m.Called(ctx, tx, name)

	if len(ret) == 0 {
		panic("no return value specified for IsArtistExists")
	}

	var r0 int
	var r1 bool
	if rf, ok := ret.Get(0).(func(context.Context, pgx.Tx, string) (int, bool)); ok {
		return rf(ctx, tx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, pgx.Tx, string) int); ok {
		r0 = rf(ctx, tx, name)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, pgx.Tx, string) bool); ok {
		r1 = rf(ctx, tx, name)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockTracksRepository_IsArtistExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsArtistExists'
type MockTracksRepository_IsArtistExists_Call struct {
	*mock.Call
}

// IsArtistExists is a helper method to define mock.On call
//   - ctx context.Context
//   - tx pgx.Tx
//   - name string
func (_e *MockTracksRepository_Expecter) IsArtistExists(ctx interface{}, tx interface{}, name interface{}) *MockTracksRepository_IsArtistExists_Call {
	return &MockTracksRepository_IsArtistExists_Call{Call: _e.mock.On("IsArtistExists", ctx, tx, name)}
}

func (_c *MockTracksRepository_IsArtistExists_Call) Run(run func(ctx context.Context, tx pgx.Tx, name string)) *MockTracksRepository_IsArtistExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(pgx.Tx), args[2].(string))
	})
	return _c
}

func (_c *MockTracksRepository_IsArtistExists_Call) Return(id int, exists bool) *MockTracksRepository_IsArtistExists_Call {
	_c.Call.Return(id, exists)
	return _c
}

func (_c *MockTracksRepository_IsArtistExists_Call) RunAndReturn(run func(context.Context, pgx.Tx, string) (int, bool)) *MockTracksRepository_IsArtistExists_Call {
	_c.Call.Return(run)
	return _c
}

// IsTrackExists provides a mock function with given fields: ctx, trackName, artistName
func (_m *MockTracksRepository) IsTrackExists(ctx context.Context, trackName string, artistName string) (bool, error) {
	ret := _m.Called(ctx, trackName, artistName)

	if len(ret) == 0 {
		panic("no return value specified for IsTrackExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (bool, error)); ok {
		return rf(ctx, trackName, artistName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(ctx, trackName, artistName)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, trackName, artistName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTracksRepository_IsTrackExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsTrackExists'
type MockTracksRepository_IsTrackExists_Call struct {
	*mock.Call
}

// IsTrackExists is a helper method to define mock.On call
//   - ctx context.Context
//   - trackName string
//   - artistName string
func (_e *MockTracksRepository_Expecter) IsTrackExists(ctx interface{}, trackName interface{}, artistName interface{}) *MockTracksRepository_IsTrackExists_Call {
	return &MockTracksRepository_IsTrackExists_Call{Call: _e.mock.On("IsTrackExists", ctx, trackName, artistName)}
}

func (_c *MockTracksRepository_IsTrackExists_Call) Run(run func(ctx context.Context, trackName string, artistName string)) *MockTracksRepository_IsTrackExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockTracksRepository_IsTrackExists_Call) Return(exists bool, err error) *MockTracksRepository_IsTrackExists_Call {
	_c.Call.Return(exists, err)
	return _c
}

func (_c *MockTracksRepository_IsTrackExists_Call) RunAndReturn(run func(context.Context, string, string) (bool, error)) *MockTracksRepository_IsTrackExists_Call {
	_c.Call.Return(run)
	return _c
}

// WithTx provides a mock function with given fields: ctx, fn
func (_m *MockTracksRepository) WithTx(ctx context.Context, fn func(pgx.Tx) error) error {
	ret := _m.Called(ctx, fn)

	if len(ret) == 0 {
		panic("no return value specified for WithTx")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, func(pgx.Tx) error) error); ok {
		r0 = rf(ctx, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTracksRepository_WithTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithTx'
type MockTracksRepository_WithTx_Call struct {
	*mock.Call
}

// WithTx is a helper method to define mock.On call
//   - ctx context.Context
//   - fn func(pgx.Tx) error
func (_e *MockTracksRepository_Expecter) WithTx(ctx interface{}, fn interface{}) *MockTracksRepository_WithTx_Call {
	return &MockTracksRepository_WithTx_Call{Call: _e.mock.On("WithTx", ctx, fn)}
}

func (_c *MockTracksRepository_WithTx_Call) Run(run func(ctx context.Context, fn func(pgx.Tx) error)) *MockTracksRepository_WithTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(func(pgx.Tx) error))
	})
	return _c
}

func (_c *MockTracksRepository_WithTx_Call) Return(_a0 error) *MockTracksRepository_WithTx_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTracksRepository_WithTx_Call) RunAndReturn(run func(context.Context, func(pgx.Tx) error) error) *MockTracksRepository_WithTx_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTracksRepository creates a new instance of MockTracksRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTracksRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTracksRepository {
	mock := &MockTracksRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
