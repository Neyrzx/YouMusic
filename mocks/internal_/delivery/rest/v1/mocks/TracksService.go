// Code generated by mockery v2.49.1. DO NOT EDIT.

package mocks

import (
	context "context"

	dtos "github.com/neyrzx/youmusic/internal/dtos"
	mock "github.com/stretchr/testify/mock"
)

// MockTracksService is an autogenerated mock type for the TracksService type
type MockTracksService struct {
	mock.Mock
}

type MockTracksService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTracksService) EXPECT() *MockTracksService_Expecter {
	return &MockTracksService_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, track
func (_m *MockTracksService) Create(ctx context.Context, track dtos.TrackCreateDTO) error {
	ret := _m.Called(ctx, track)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, dtos.TrackCreateDTO) error); ok {
		r0 = rf(ctx, track)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTracksService_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockTracksService_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - track dtos.TrackCreateDTO
func (_e *MockTracksService_Expecter) Create(ctx interface{}, track interface{}) *MockTracksService_Create_Call {
	return &MockTracksService_Create_Call{Call: _e.mock.On("Create", ctx, track)}
}

func (_c *MockTracksService_Create_Call) Run(run func(ctx context.Context, track dtos.TrackCreateDTO)) *MockTracksService_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dtos.TrackCreateDTO))
	})
	return _c
}

func (_c *MockTracksService_Create_Call) Return(_a0 error) *MockTracksService_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTracksService_Create_Call) RunAndReturn(run func(context.Context, dtos.TrackCreateDTO) error) *MockTracksService_Create_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTracksService creates a new instance of MockTracksService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTracksService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTracksService {
	mock := &MockTracksService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
