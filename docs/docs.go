// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag at
// 2024-11-30 00:30:28.005965424 +1200 +12 m=+0.083362731

package docs

import (
	"bytes"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "swagger": "2.0",
    "info": {
        "description": "Это проект был разработан в рамках тестового задания от EffectiveMobile",
        "title": "YouMusic",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "email": "khorev.valeriy@yandex.ru"
        },
        "license": {
            "name": "MIT",
            "url": "https://github.com/Neyrzx/YouMusic?tab=MIT-1-ov-file"
        },
        "version": "0.0.1"
    },
    "host": "localhost:9090",
    "basePath": "/api/v1",
    "paths": {
        "/tracks": {
            "post": {
                "description": "Creating track",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tracks"
                ],
                "summary": "Create track",
                "parameters": [
                    {
                        "description": "Create track by song and group names.",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/v1.TracksCreateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success created",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/v1.HTTPError"
                        }
                    },
                    "422": {
                        "description": "Validation errors",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/v1.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/v1.HTTPError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "v1.HTTPError": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "v1.TracksCreateRequest": {
            "type": "object",
            "required": [
                "group",
                "song"
            ],
            "properties": {
                "group": {
                    "type": "string",
                    "example": "Muse"
                },
                "song": {
                    "type": "string",
                    "example": "Song name"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo swaggerInfo

type s struct{}

func (s *s) ReadDoc() string {
	t, err := template.New("swagger_info").Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, SwaggerInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
